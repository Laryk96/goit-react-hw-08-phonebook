{"version":3,"file":"static/js/994.d14e1d15.chunk.js","mappings":"+SAIMA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAkB,CACpCE,MAAO,OACPC,OAAQ,OAER,UAAW,CACTC,MAAO,wBACPC,SAAU,IAGZ,sBAAuB,CACrBD,MAAO,OACPC,SAAU,IAGZ,8BAA+B,CAC7BC,kBAAmB,QAGrB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,yBAGf,mBAAoB,CAClBA,YAAa,QAGf,yBAA0B,CACxBA,YAAa,WAIjB,wBAAyB,CACvBC,QAAS,YACTH,SAAU,GACVD,MAAO,UAILK,GAAeT,EAAAA,EAAAA,IAAOU,EAAAA,EAAPV,CAAe,CAClCE,MAAO,OAEPS,aAAc,OACdN,SAAU,GACVO,cAAe,YACfC,UAAW,iCACXC,WAAY,OACZC,eAAgB,YAEhBC,gBACE,qEAEF,UAAW,CACTC,mBAAoB,eACpBb,MAAO,OACPc,eAAgB,OAChBC,gBAAiB,IAEnB,WAAY,CACVN,UAAW,OACXM,gBAAiB,UACjBZ,YAAa,WAEf,UAAW,CACTM,UAAW,qCAKTO,GAAOpB,EAAAA,EAAAA,IAAOqB,EAAAA,EAAPrB,CAAH,wcAiBJsB,GAAYtB,EAAAA,EAAAA,IAAOqB,EAAAA,EAAPrB,CAAH,qE,sJCjFTuB,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAENC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,KAAMI,EAAAA,KAEHE,IAAI,EAAG,oBACPC,IAAI,GAAI,oBACRC,WACHP,MAAOG,EAAAA,KAEJH,MAAM,uCACNO,SAAS,qBACZN,SAAUE,EAAAA,KAEPI,SAAS,yBACTF,IAAI,EAAG,wDAING,EAAS,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBd,cAAAA,EACAe,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBN,GAASO,EAAAA,EAAAA,IAASF,IAClBC,GACD,EACDE,iBAAkBf,IAGpB,OACE,UAAC,KAAD,CACEgB,UAAU,OACVC,YAAU,EACVC,aAAa,MACbP,SAAUF,EAAOU,aAJnB,WAME,SAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQtC,cAAe,aAF7C,sBAOA,SAAC,KAAD,CACEoB,UAAQ,EACRmB,MAAM,WACNC,KAAK,OACL5B,KAAK,OACLwB,QAAQ,WACRK,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOG,OAAOf,QAEvB,SAAC,KAAD,CACEQ,UAAQ,EACRgB,QAAQ,WACRI,KAAK,OACL5B,KAAK,QACL2B,MAAM,QACNE,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOG,OAAOd,SAEvB,SAAC,KAAD,CACEO,UAAQ,EACRmB,MAAM,WACNC,KAAK,WACL5B,KAAK,WACLqB,aAAa,mBACbG,QAAQ,WACRC,GAAI,CAAEO,GAAI,QACVH,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOG,OAAOb,YAEvB,SAAC,KAAD,CACE0B,KAAK,SACLJ,QAAQ,YACRS,WAAYrB,EAAOsB,SAAWtB,EAAOuB,OAHvC,sBASL,EAED,GAAeC,EAAAA,EAAAA,MAAK3B,GCtFpB,EARyB,WACvB,OACE,SAAC,KAAD,CAAWU,UAAU,MAArB,UACE,SAAC,EAAD,KAGL,C","sources":["components/SignUp/SignUp.styled.jsx","components/SignUp/SignUp.jsx","pages/RegistrationPage.jsx"],"sourcesContent":["import { Button, TextField, Box } from '@mui/material';\n\nimport { styled } from '@mui/material/styles';\n\nconst StyledInput = styled(TextField)({\n  width: '100%',\n  height: '50px',\n\n  '& label': {\n    color: 'rgba(255,255,255,0.6)',\n    fontSize: 14,\n  },\n\n  '& label.Mui-focused': {\n    color: '#fff',\n    fontSize: 16,\n  },\n\n  '& .MuiInput-underline:after': {\n    borderBottomColor: '#fff',\n  },\n\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'rgba(255,255,255,0.6)',\n    },\n\n    '&:hover fieldset': {\n      borderColor: '#fff',\n    },\n\n    '&.Mui-focused fieldset': {\n      borderColor: 'yellow',\n    },\n  },\n\n  '& .MuiInputBase-input': {\n    padding: '10px 12px',\n    fontSize: 16,\n    color: '#fff',\n  },\n});\n\nconst StyledButton = styled(Button)({\n  width: '100%',\n\n  borderRadius: '30px',\n  fontSize: 16,\n  textTransform: 'uppercase',\n  boxShadow: '0 0 20px rgba(255,255,255,0.5)',\n  transition: '0.5s',\n  backgroundSize: '200% auto',\n\n  backgroundImage:\n    'linear-gradient(to right, #000000 0%, #53346D  51%, #000000  100%)',\n\n  '&:hover': {\n    backgroundPosition: 'right center',\n    color: '#fff',\n    textDecoration: 'none',\n    backgroundColor: '',\n  },\n  '&:active': {\n    boxShadow: 'none',\n    backgroundColor: '#0062cc',\n    borderColor: '#005cbf',\n  },\n  '&:focus': {\n    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n  },\n});\n//\n\nconst Form = styled(Box)`\n  width: 400px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px 20px;\n  color: #fff;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n`;\n\nconst Container = styled(Box)`\n  display: flex;\n  justify-content: center;\n`;\nexport { StyledButton, StyledInput, Form, Container };\n","import { Typography } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\n\nimport { register } from 'redux/auth/operation';\nimport { StyledButton, StyledInput, Form } from './SignUp.styled';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'to short, min: 3')\n    .max(20, 'to long, max: 20')\n    .required(),\n  email: yup\n    .string()\n    .email('Email must be a valid email address')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(7, 'Password is too short - should be 8 chars minimum.'),\n  // .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(register(values));\n      resetForm();\n    },\n    validationSchema: schema,\n  });\n\n  return (\n    <Form\n      component=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={formik.handleSubmit}\n    >\n      <Typography\n        variant=\"h3\"\n        sx={{ marginBottom: '30px', textTransform: 'uppercase' }}\n      >\n        Sign up\n      </Typography>\n\n      <StyledInput\n        required\n        label=\"Username\"\n        type=\"text\"\n        name=\"name\"\n        variant=\"standard\"\n        onChange={formik.handleChange}\n        value={formik.values.name}\n      />\n      <StyledInput\n        required\n        variant=\"standard\"\n        type=\"text\"\n        name=\"email\"\n        label=\"Email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n      <StyledInput\n        required\n        label=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        autoComplete=\"current-password\"\n        variant=\"standard\"\n        sx={{ mb: '10px' }}\n        onChange={formik.handleChange}\n        value={formik.values.password}\n      />\n      <StyledButton\n        type=\"submit\"\n        variant=\"contained\"\n        disabled={!(formik.isValid && formik.dirty)}\n      >\n        Create\n      </StyledButton>\n    </Form>\n  );\n};\n\nexport default memo(SignUp);\n","import SignUp from 'components/SignUp/SignUp';\nimport { Container } from 'components/SignUp/SignUp.styled';\n\nconst RegistrationPage = () => {\n  return (\n    <Container component=\"div\">\n      <SignUp />\n    </Container>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["StyledInput","styled","TextField","width","height","color","fontSize","borderBottomColor","borderColor","padding","StyledButton","Button","borderRadius","textTransform","boxShadow","transition","backgroundSize","backgroundImage","backgroundPosition","textDecoration","backgroundColor","Form","Box","Container","initialValues","name","email","password","schema","yup","shape","min","max","required","SignUp","dispatch","useDispatch","formik","useFormik","onSubmit","values","resetForm","register","validationSchema","component","noValidate","autoComplete","handleSubmit","Typography","variant","sx","marginBottom","label","type","onChange","handleChange","value","mb","disabled","isValid","dirty","memo"],"sourceRoot":""}